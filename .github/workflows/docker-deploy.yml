name: Build and Publish Docker Image to GHCR.io

on:
  push:
    branches:
      - main
  release:
    types:
      - published
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and push `nhmesh/producer` image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - uses: docker/setup-qemu-action@v3
 
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/producer
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get current date
        id: date
        run: echo "date=$(date --rfc-3339=seconds | sed 's/ /T/g')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ steps.date.outputs.date }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}
            GITHUB_REPO=${{ github.repository }}
            IMAGE_TITLE=${{ github.repository_owner }}/producer
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Add Docker image info to release
        if: github.event_name == 'release'
        uses: actions/github-script@v7
        with:
          script: |
            const release = context.payload.release;
            const tags = `${{ steps.meta.outputs.tags }}`.split('\n');
            const repoOwner = '${{ github.repository_owner }}'.toLowerCase();

            const dockerInfo = `
            ## 🐳 Docker Images

            This release is available as Docker images:

            \`\`\`bash
            # Pull specific version
            docker pull ghcr.io/${repoOwner}/producer:${{ github.ref_name }}

            # Pull latest
            docker pull ghcr.io/${repoOwner}/producer:latest
            \`\`\`

            **Available tags:**
            ${tags.map(tag => `- \`${tag}\``).join('\n')}

            **Registry:** [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container/producer)
            `;

            const currentBody = release.body || '';
            const updatedBody = currentBody + '\n' + dockerInfo;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: updatedBody
            });

      - name: Add PR comment with Docker info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const tags = `${{ steps.meta.outputs.tags }}`.split('\n');
            const prNumber = context.payload.pull_request.number;
            const repoOwner = '${{ github.repository_owner }}'.toLowerCase();

            const dockerInfo = `
            ## 🐳 Docker Images Built for PR #${prNumber}

            This PR has been built and published as Docker images for testing:

            \`\`\`bash
            # Pull PR image for testing
            docker pull ghcr.io/${repoOwner}/producer:pr-${prNumber}
            \`\`\`

            **Available tags:**
            ${tags.map(tag => `- \`${tag}\``).join('\n')}

            **Registry:** [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container/producer)

            > 🔄 This image will be updated automatically when new commits are pushed to this PR.
            >
            > **Last updated:** ${new Date().toISOString()} (commit: ${context.sha.substring(0, 7)})
            `;

            // Try to find and update existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const botComment = comments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('🐳 Docker Images Built for PR')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: dockerInfo
              });
              console.log('Updated existing Docker comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: dockerInfo
              });
              console.log('Created new Docker comment');
            }

  deploy-to-raspberry-pi:
    name: Deploy to Raspberry Pi
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Raspberry Pi via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USERNAME }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: 22
          script: |
            echo "🚀 Deploying nhmesh-producer containers..."
            echo ""
            
            # Find all nhmesh-producer containers
            CONTAINERS=$(docker ps --filter "name=nhmesh-producer" --format "{{.Names}}")
            
            if [ -z "$CONTAINERS" ]; then
              echo "❌ No nhmesh-producer containers found!"
              exit 1
            fi
            
            echo "📦 Found containers:"
            echo "$CONTAINERS"
            echo ""
            
            # Process each container
            for container in $CONTAINERS; do
              echo "🔄 Updating $container..."
              
              # Get the current image
              IMAGE=$(docker inspect $container --format='{{.Config.Image}}')
              echo "  Current image: $IMAGE"
              
              # Pull latest version
              echo "  Pulling latest image..."
              sudo docker pull $IMAGE
              
              # Stop and remove the old container
              echo "  Stopping container..."
              sudo docker stop $container
              
              echo "  Removing old container..."
              sudo docker rm $container
              
              # Get the container configuration for recreation
              # Since these are Portainer-managed, we'll use docker run with the same config
              echo "  Recreating container from Portainer stack..."
              
              # Use docker-compose from Portainer's directory
              COMPOSE_DIR=$(docker inspect $container --format='{{index .Config.Labels "com.docker.compose.project.working_dir"}}' 2>/dev/null || echo "")
              
              if [ -n "$COMPOSE_DIR" ] && [ -d "$COMPOSE_DIR" ]; then
                echo "  Found Portainer compose directory: $COMPOSE_DIR"
                cd "$COMPOSE_DIR"
                sudo docker-compose up -d
              else
                echo "  ⚠️  Could not find compose directory, container may need manual restart via Portainer"
              fi
              
              echo "  ✅ $container updated"
              echo ""
            done
            
            echo "✅ Deployment complete!"
            echo ""
            echo "📊 Final container status:"
            docker ps --filter "name=nhmesh-producer" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" || true
            echo ""
            
            # Wait a moment for healthchecks
            echo "⏳ Waiting 10 seconds for containers to stabilize..."
            sleep 10
            
            echo "🏥 Health status:"
            for container in $CONTAINERS; do
              HEALTH=$(docker inspect $container --format='{{.State.Health.Status}}' 2>/dev/null || echo "no healthcheck")
              echo "  $container: $HEALTH"
            done
